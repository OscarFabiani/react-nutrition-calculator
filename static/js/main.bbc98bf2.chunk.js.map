{"version":3,"sources":["index.js"],"names":["setNutrientValue","nutrients","id","nutrient","find","nutrient_id","value","createFoodObject","food","desc","ndbno","name","unit","measurements","roundToTwo","num","Math","round","foodNames","Calculator","state","foodData","foodGrams","expansions","isLoading","error","updateTotals","grams","index","_this","setState","concat","Object","C_Users_oscarunnatural_Documents_JS_React_react_projects_react_nutrition_calculator_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","slice","Number","toggleExpansion","newExpansions","_this2","this","fetch","then","result","ok","json","foods","map","catch","console","log","_this$state","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","message","className","Meal","Foods","React","Component","_this$props","props","nutrientArrays","totals","reduce","total","array","_this$props2","foodRenders","i","Food","key","isExpanded","handleClick","_this3$props","_this3","handleChange","event","_this3$props2","target","_this$props3","iconClass","nutrientRenders","type","min","max","onChange","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbc98bf2.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \r\n\r\n\r\n\r\n\r\n\r\n//API key: 5iIK49BdqtpcdNs7c4x9B7g6guq7saZaWOVdnn8j\r\n\r\n\r\n//Foods and id numbers:\r\n\r\n//Eggs 01123\r\n//Chickpeas 16058\r\n//Black beans 16018\r\n//Coconut oil 04047\r\n//Olive oil 04053\r\n//Sardines 15088\r\n\r\n\r\n\r\n\r\n//This function checks if a nutrient exists in a food report. This is meant to be used when creating custom\r\n//food objects from API food reports since some foods seem to ommitt certain key nutrients.\r\n//NOTE: Another approach would be to vet each food making sure each had all of the key nutrients present (or\r\n//limiting the key nutrients accordingly). Another approach would be to create logic that excludes any ommitted\r\n//nutrients from the custom food objects (if more suitable for functionalitly).\r\nconst setNutrientValue = (nutrients, id) => {\r\n  const nutrient = nutrients.find(nutrient => nutrient.nutrient_id === id);\r\n  //Alterative value could be undefined (with no ternary),  null, 0, or something else depending on desired\r\n  //functionality.\r\n  return nutrient? nutrient.value : null;\r\n}\r\n\r\nconst createFoodObjects = (foods) => {\r\n  return foods.map(food => createFoodObject(food.food));\r\n}\r\n\r\nconst createFoodObject = (food) => {\r\n  return {\r\n    id: food.desc.ndbno,\r\n    name: food.desc.name,\r\n    nutrients: [\r\n      {\r\n        id: 208,\r\n        name: 'Calories',\r\n        unit: 'kcals',\r\n        value: setNutrientValue(food.nutrients, 208),\r\n        measurements: {},\r\n      },\r\n      {\r\n        id: 203,\r\n        name: 'Protein(g)',\r\n        unit: 'grams',\r\n        value: setNutrientValue(food.nutrients, 203),\r\n        measurements: {},\r\n      },\r\n      {\r\n        id: 204,\r\n        name: 'Fat(g)',\r\n        unit: 'grams',\r\n        value: setNutrientValue(food.nutrients, 204),\r\n        measurements: {},\r\n      },\r\n      {\r\n        id: 205,\r\n        name: 'Carbs(g)',\r\n        unit: 'grams',\r\n        value: setNutrientValue(food.nutrients, 205),\r\n        measurements: {},\r\n      },\r\n    ]\r\n  }\r\n}\r\n\r\n\r\n//This function is used to round a number to 2 decimal places and seems to avoid issues with using Math.round and\r\n//the toFixed() method.\r\n//NOTE: an alternative to this would simply be: Math.round(nutrient.value * grams) / 100\r\nconst roundToTwo = (num) => {    \r\n  return +(Math.round(num + \"e+2\")  + \"e-2\");\r\n}\r\n\r\n\r\n//URL for USDA food items:\r\nconst foodsURL = 'https://api.nal.usda.gov/ndb/V2/reports?ndbno=04053&ndbno=04047&ndbno=01123&ndbno=16018&ndbno=16058&ndbno=15088&&type=f&format=json&api_key=5iIK49BdqtpcdNs7c4x9B7g6guq7saZaWOVdnn8j';\r\n\r\n//Object to replace lengthy food names from USDA database with preferred/concise food names\r\nconst foodNames = ['Olive oil', 'Coconut oil', 'Eggs', 'Chickpeas', 'Black beans', 'Sardines'];\r\n\r\n\r\nclass Calculator extends React.Component {\r\n  state = {\r\n    foodData: [],\r\n    foodGrams: [0, 0, 0, 0, 0, 0],\r\n    expansions: [false, false, false, false, false, false],\r\n    isLoading: false,\r\n    error: null\r\n  }\r\n\r\n  updateTotals = (grams, index) => {\r\n    const {foodGrams} = this.state;\r\n    this.setState ({\r\n      foodGrams: [...foodGrams.slice(0, index), Number(grams), ...foodGrams.slice(index + 1)]\r\n    })\r\n  }\r\n\r\n  toggleExpansion = (index) => {\r\n    const {expansions} = this.state;\r\n    const newExpansions = [...expansions.slice(0, index), !expansions[index], ...expansions.slice(index + 1)];\r\n    this.setState ({\r\n      expansions: newExpansions\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({isLoading: true})\r\n\r\n    fetch(foodsURL)\r\n    .then(result => {\r\n      if (result.ok) {\r\n        return result.json();\r\n      } else {\r\n        return;\r\n      }\r\n    })\r\n    .then(result => {\r\n      this.setState({\r\n        foodData: createFoodObjects(result.foods),\r\n        isLoading: false\r\n      })\r\n    })\r\n    .catch(error => {\r\n      console.log('error: ', error);\r\n      this.setState({error})\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    const {foodData, foodGrams, expansions, isLoading, error} = this.state;\r\n    \r\n    return (\r\n      error ? <span>Something went wrong...{error.message}</span> :\r\n      isLoading ? <span>Loading...</span> :\r\n      <div className='calculator'>\r\n        <Meal\r\n        foodData={foodData}\r\n        foodGrams={foodGrams}\r\n        />\r\n        <Foods\r\n        foodData={foodData}\r\n        foodGrams={foodGrams}\r\n        expansions={expansions}\r\n        updateTotals={this.updateTotals}\r\n        toggleExpansion={this.toggleExpansion}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Meal extends React.Component {\r\n  render () {\r\n    const {foodData, foodGrams} = this.props;\r\n    //const totalGrams = foodGrams.reduce((total, grams) => total + grams, 0);\r\n\r\n    //Creates 6 arrays containing 4 values (1 for each nutrient) to be used for calculating totals\r\n    const nutrientArrays = foodData.map((food, index) => {\r\n      return food.nutrients.map(nutrient => {\r\n        return nutrient.value * foodGrams[index] / 100;\r\n      })\r\n    });\r\n\r\n    //Creates an array with 4 values representing nutrient totals\r\n    const totals = [0, 1, 2, 3].map(index => nutrientArrays.reduce((total, array) => total + array[index], 0));\r\n\r\n    return (\r\n      <section className='meal-display'>\r\n        <h1 className=\"title\">Macronutrient Calculator</h1>\r\n        <div className=\"meal-totals\">\r\n          <h2 className='totals-label'>Meal Totals:</h2>\r\n          <div className='totals-table'>\r\n            <div className='meal-nutrient-total'>\r\n              <h3 className='total-column label'>Calories</h3>\r\n              <h3 className='total-column amount'>: {roundToTwo(totals[0])}</h3>\r\n            </div>\r\n            <div className='meal-nutrient-total'>\r\n              <h3 className='total-column label'>Protein(g)</h3>\r\n              <h3 className='total-column amount'>: {roundToTwo(totals[1])}</h3>\r\n            </div>\r\n            <div className='meal-nutrient-total'>\r\n              <h3 className='total-column label'>Fat(g)</h3>\r\n              <h3 className='total-column amount'>: {roundToTwo(totals[2])}</h3>\r\n            </div>\r\n            <div className='meal-nutrient-total'>\r\n              <h3 className='total-column label'>Carbs(g)</h3>\r\n              <h3 className='total-column amount'>: {roundToTwo(totals[3])}</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <p className=\"instructions\">Enter amounts for foods and the meal totals automatically update!</p>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nclass Foods extends React.Component {\r\n  render() {\r\n    const {foodData, foodGrams, expansions, updateTotals, toggleExpansion} = this.props;\r\n\r\n    const foodRenders = foodData.map((food, i) => {\r\n      return (\r\n        <Food\r\n          key={i}\r\n          index={i}\r\n          name={foodNames[i]}\r\n          nutrients={food.nutrients}\r\n          grams={foodGrams[i]}\r\n          updateTotals={updateTotals}\r\n          isExpanded={expansions[i]}\r\n          toggleExpansion={toggleExpansion}/>\r\n      )\r\n    })\r\n    return (\r\n      <div className='foods'>\r\n        {foodRenders}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Food extends React.Component {\r\n  handleClick = () => {\r\n    const {index, toggleExpansion} = this.props;\r\n    toggleExpansion(index);\r\n  }\r\n  handleChange = (event) => {\r\n    const {index, updateTotals} = this.props;\r\n    updateTotals(event.target.value, index);\r\n  }\r\n  \r\n  render() {\r\n    const {name, nutrients, grams, isExpanded} = this.props;\r\n\r\n    const iconClass = isExpanded ? \"fa fa-sort-up icon up-icon\" : \"fa fa-sort-down icon down-icon\";\r\n\r\n    const nutrientRenders = nutrients.map((nutrient, i) => {\r\n      return (\r\n        <div key={i} className='food-nutrient-total'>\r\n          <p className='food-column label'>{nutrient.name}</p>\r\n          <p className='food-column amount'>: {roundToTwo(nutrient.value * (grams / 100))}</p>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div className='food'>\r\n        <h3 className='food-label'>{name}</h3>\r\n        <div className=\"input-display\">\r\n          <input className='input' type='number' min='0' max='999' value={grams} onChange={this.handleChange}/>\r\n          <span>(grams)</span>\r\n        </div>\r\n        <div className=\"details-display\">\r\n          <div className='details-label' onClick={this.handleClick}>\r\n            <i className={iconClass}></i>\r\n            <h4>Details</h4>\r\n            <i className={iconClass}></i>\r\n          </div>\r\n          {isExpanded && <ul className=\"nutrient-list\">{nutrientRenders}</ul>}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <Calculator />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n//STYLE\r\n\r\n//As of 4/15/19 I have created 2 methods to render data from an API food report. The first is to pull data from\r\n//the report considering the format of the food report object and necessarily filtering the nested nutrient\r\n//object using a local object of nutrient ID's and preferred names. The second is to create a custom food\r\n//object from the API report when Fetching then writing the data display logic considering the custom object's\r\n//format with no need for filtering through nutrients or addeding logic for displaying preffered names of\r\n//nutrients (though it looks I'll still need either a local object or added logic to the custom object to\r\n//display prefferred food names).\r\n\r\n//As of now I'm not sure which of these methods will be best going forward. It looks like the second method\r\n//results in more lines of code but makes the components more concise and understandable. One method may prove\r\n//preferrable over the other as I add secondary nutrients and increase functionality.\r\n\r\n\r\n\r\n\r\n\r\n//These objects haven't been necessary yet.\r\n/*\r\nconst nutrientIDs = [\r\n  {\r\n    name: 'Calories',\r\n    id: 208\r\n  }, \r\n  {\r\n    name: 'Protein',\r\n    id: 203\r\n  },\r\n  {\r\n    name: 'Total Fat',\r\n    id: 204\r\n  },\r\n  {\r\n    name: 'Carbs \"by difference\"',\r\n    id: 205\r\n  }\r\n]\r\n\r\n\r\nconst carbIDs = [\r\n  {\r\n    name: 'Total Dietary Fiber',\r\n    id: 291\r\n  },\r\n  {\r\n    name: 'Total Sugars',\r\n    id: 269\r\n  }\r\n]\r\n\r\nconst fatIDs = [\r\n  {\r\n    name: 'Saturated Fat',\r\n    id: 606\r\n  },\r\n  {\r\n    name: 'Monosaturated Fat',\r\n    id: 645\r\n  },\r\n  {\r\n    name: 'Polyunsaturated Fat',\r\n    id: 646\r\n  },\r\n  {\r\n    name: 'Trans Fat',\r\n    id: 605\r\n  }\r\n]\r\n*/\r\n\r\n\r\n//This function seems to be unnecessary due to it's complexity (currently using a function that creates a\r\n//simpler object).\r\n/*\r\n//THIS FUNCTION LIKELY NEEDS TO BE REFACTORED TO INCLUDE NESTED ARRAYS OF OBJECTS FOR MAPPING (SIMILAR TO\r\n//createSimpleObject()).\r\nconst createComplexFoodObject = (report) => {\r\n  //console.log('report: ', report);\r\n  return {\r\n    id: report.desc.ndbno,\r\n    name: report.desc.name,\r\n    nutrients: {\r\n      calories: {\r\n        id: 208,\r\n        name: 'Calories',\r\n        unit: 'kcals',\r\n        value: setNutrientValue(report.nutrients, 208),\r\n        measurements: {},\r\n      },\r\n      protein: {\r\n        id: 203,\r\n        name: 'Protein',\r\n        unit: 'grams',\r\n        value: setNutrientValue(report.nutrients, 203),\r\n        measurements: {},\r\n      },\r\n      fat: {\r\n        id: 204,\r\n        name: 'Total Fat',\r\n        unit: 'grams',\r\n        value: setNutrientValue(report.nutrients, 204),\r\n        measurements: {},\r\n      },\r\n      carbs: {\r\n        id: 205,\r\n        name: 'Total Carbs',\r\n        unit: 'grams',\r\n        value: setNutrientValue(report.nutrients, 205),\r\n        measurements: {},\r\n      },\r\n      allCarbs: {\r\n        totalCarbs: {\r\n          id: 205,\r\n          name: 'Total Carbs',\r\n          unit: 'grams',\r\n          value: setNutrientValue(report.nutrients, 205),\r\n          measurements: {},\r\n        },\r\n        fiber: {\r\n          id: 291,\r\n          name: 'Total Fiber',\r\n          unit: 'grams',\r\n          value: setNutrientValue(report.nutrients, 291),\r\n          measurements: {},\r\n        },\r\n        sugars: {\r\n          id: 269,\r\n          name: 'Total Sugars',\r\n          unit: 'grams',\r\n          value: setNutrientValue(report.nutrients, 269),\r\n          measurements: {},\r\n        }\r\n      },\r\n      allFats: {\r\n        totalFat: {\r\n          id: 204,\r\n          name: 'Total Fat',\r\n          unit: 'grams',\r\n          value: setNutrientValue(report.nutrients, 204),\r\n          measurements: {},\r\n        },\r\n        satFat: {\r\n          id: 606,\r\n          name: 'Saturated Fat',\r\n          unit: 'grams',\r\n          value: setNutrientValue(report.nutrients, 606),\r\n          measurements: {},\r\n        },\r\n        monoFat: {\r\n          id: 645,\r\n          name: 'Monosaturated Fat',\r\n          unit: 'grams',\r\n          value: setNutrientValue(report.nutrients, 645),\r\n          measurements: {},\r\n        },\r\n        polyFat: {\r\n          id: 646,\r\n          name: 'Polyunsaturated Fat',\r\n          unit: 'grams',\r\n          value: setNutrientValue(report.nutrients, 646),\r\n          measurements: {},\r\n        },\r\n        transFat: {\r\n          id: 605,\r\n          name: 'Trans Fat',\r\n          unit: 'grams',\r\n          value: setNutrientValue(report.nutrients, 605),\r\n          measurements: {},\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\n\r\n\r\n//This logic is for displaying data from the API food report without creating a local custom object.\r\n/*\r\n//This was originally in the render method of Accordian\r\nconst foodRenders = foodData.map((food, i) => {\r\n  //console.log('food', food);\r\n\r\n  const nutrientData = food.nutrients.filter(nutrient => nutrientIDs.some(n => n.id === nutrient.nutrient_id))\r\n  //console.log('nutrientData', nutrientData);\r\n\r\n  return (\r\n    <Food\r\n      key={i}\r\n      index={i}\r\n      desc={food.desc}\r\n      nutrients={nutrientData}\r\n      currentIndex={currentIndex}\r\n      handleClick={this.handleClick}/>\r\n  )\r\n})\r\n\r\nclass Food extends React.Component {\r\n  handleClick = () => {\r\n    const {index, handleClick} = this.props;\r\n    handleClick(index);\r\n  }\r\n  render() {\r\n    const {index, desc, nutrients, currentIndex} = this.props;\r\n    let current = currentIndex === index;\r\n\r\n    const nutrientRenders = nutrients.map((nutrient, i) => {\r\n      const name = nutrientIDs.find(nid => nid.id === nutrient.nutrient_id).name;\r\n      return (\r\n        <ul key={i}>\r\n          <li className='question' onClick={this.handleClick}>{name}</li>\r\n          {current && <li className='answer'><ul>{`${nutrient.value}${nutrient.unit}'s`}</ul></li>}\r\n        </ul>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        <h1>{desc.name}</h1>\r\n        <span>(per 100 grams)</span>\r\n        {nutrientRenders}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n*/\r\n"],"sourceRoot":""}